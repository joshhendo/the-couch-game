{"version":3,"file":"room-processor.js","sourceRoot":"","sources":["room-processor.ts"],"names":[],"mappings":"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","sourcesContent":["import * as roomRepository from \"../data/repositories/room-repository\";\r\nimport * as shortid from \"shortid\";\r\nimport {\r\n  addParticipantForRoom,\r\n  getParticipantsForRoom,\r\n  updateParticipants\r\n} from \"../data/repositories/participant-repository\";\r\nimport * as _ from 'lodash';\r\nimport {roomChanged} from \"../controllers/websocket-controller\";\r\nimport {updateRoom} from \"../data/repositories/room-repository\";\r\n\r\nexport async function createRoom(size: number) {\r\n  const code = shortid.generate();\r\n\r\n  await roomRepository.createRoom(code, size);\r\n\r\n  return code;\r\n}\r\n\r\nexport async function addParticipant(code: string, name: string) {\r\n  const room = await roomRepository.getRoom(code);\r\n  if (room.state !== 'pending') {\r\n    throw new Error();\r\n  }\r\n\r\n  const participants = await getParticipantsForRoom(code);\r\n  const participantsByName = _.keyBy(participants);\r\n\r\n  if (participantsByName[name]) {\r\n    throw new Error();\r\n  }\r\n\r\n  const participant = await addParticipantForRoom(code, name);\r\n\r\n  return participant;\r\n}\r\n\r\nexport async function getRoomState(code: string) {\r\n  const room = await roomRepository.getRoom(code);\r\n  if (room === null) {\r\n    return room;\r\n  }\r\n\r\n  const participants = await getParticipantsForRoom(code);\r\n  if (participants === null) {\r\n    throw new Error();\r\n  }\r\n\r\n  if (room.state !== 'pending') {\r\n    const spots = participants.length + 1;\r\n    const positionTurn = room.empty_spot < spots-1 ? room.empty_spot +1 : 0;\r\n\r\n    for (let i = 0; i < participants.length; i++) {\r\n      // Determine if they are on couch\r\n      const on_couch = participants[i].position < room.couch_size;\r\n      let turn = false;\r\n      if (participants[i].position === positionTurn) {\r\n        turn = true;\r\n      }\r\n\r\n      participants[i].state = {\r\n        on_couch,\r\n        turn\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    ...room,\r\n    participants: participants\r\n  }\r\n}\r\n\r\nfunction getRandomInt(max) {\r\n  return Math.floor(Math.random() * Math.floor(max));\r\n}\r\n\r\nexport async function startRoom(code: string) {\r\n  const room = await roomRepository.getRoom(code);\r\n  if (room === null) {\r\n    throw Error('not found');\r\n  }\r\n\r\n  if (room.state !== 'pending') {\r\n    throw Error('already started');\r\n  }\r\n\r\n  let participants = await getParticipantsForRoom(code);\r\n  if (participants === null) {\r\n    throw Error('No participants');\r\n  }\r\n\r\n  const couchSize = room.couch_size;\r\n  if (participants.length < couchSize*2) {\r\n    throw Error('There must be at least twice the number of participants than couch size');\r\n  }\r\n\r\n  room.state = 'started';\r\n\r\n  // quick but easy way to assign everyone to a team :|\r\n  participants = _.shuffle(participants);\r\n  let team = 0;\r\n  for (const participant of participants) {\r\n    participant.team = team % 2;\r\n    team++;\r\n  }\r\n\r\n  // Randomly assign everyone an ID of someone else and assign positions\r\n  const ids = _.chain(participants)\r\n    .map('id')\r\n    .shuffle()\r\n    .value();\r\n\r\n  room.empty_spot = getRandomInt(participants.length+1);\r\n  for (let i = 0; i < participants.length; i++) {\r\n    participants[i].fake_id = ids[i];\r\n\r\n    if (i < room.empty_spot) {\r\n      participants[i].position = i;\r\n    } else {\r\n      participants[i].position = i+1;\r\n    }\r\n  }\r\n\r\n  await updateRoom(code, room);\r\n  await updateParticipants(code, participants);\r\n\r\n  roomChanged(code);\r\n}"]}