{"version":3,"file":"websocket-controller.js","sourceRoot":"","sources":["websocket-controller.ts"],"names":[],"mappings":";;;;;;;;;;AACA,iEAA0D;AAC1D,2BAA2B;AAE3B,MAAM,eAAe,GAAG,EAAE,CAAC;AAE3B,0BAAiC,GAAqB;IACpD,GAAG,CAAC,EAAE,CAAC,YAAY,EAAE,CAAO,EAAa,EAAE,GAAQ,EAAE,EAAE;QACrD,MAAM,SAAS,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACrC,MAAM,MAAM,GAAG,qBAAqB,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAE9D,IAAI,MAAM,EAAE;YACV,MAAM,QAAQ,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YAC3B,MAAM,SAAS,GAAG,MAAM,6BAAY,CAAC,QAAQ,CAAC,CAAC;YAE/C,IAAI,SAAS,EAAE;gBACb,IAAI,eAAe,CAAC,QAAQ,CAAC,EAAE;oBAC7B,eAAe,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,eAAe,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC;iBAChE;qBAAM;oBACL,eAAe,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,CAAA;iBACjC;gBAED,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;aACpC;SACF;IACH,CAAC,CAAA,CAAC,CAAC;AACL,CAAC;AApBD,4CAoBC;AAED,qBAAkC,IAAY;;QAC5C,MAAM,SAAS,GAAG,MAAM,6BAAY,CAAC,IAAI,CAAC,CAAC;QAE3C,MAAM,WAAW,GAAG,eAAe,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,WAAW,EAAE;YAChB,OAAO;SACR;QAED,WAAW,CAAC,OAAO,CAAC,CAAO,UAAU,EAAE,EAAE;YACvC,IAAI;gBACF,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;aAC5C;YAAC,OAAO,GAAG,EAAE;gBACZ,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;aAC1B;QACH,CAAC,CAAA,CAAC,CAAA;IACJ,CAAC;CAAA;AAfD,kCAeC","sourcesContent":["import * as WebSocket from 'ws';\r\nimport {getRoomState} from \"../processors/room-processor\";\r\nimport * as url from 'url';\r\n\r\nconst roomSubscribers = {};\r\n\r\nexport function handleWebsockets(wss: WebSocket.Server) {\r\n  wss.on('connection', async (ws: WebSocket, req: any) => {\r\n    const parsedUrl = url.parse(req.url);\r\n    const result = /^\\/rooms\\/(.*?)\\/?$/.exec(parsedUrl.pathname);\r\n\r\n    if (result) {\r\n      const roomCode = result[1];\r\n      const roomState = await getRoomState(roomCode);\r\n\r\n      if (roomState) {\r\n        if (roomSubscribers[roomCode]) {\r\n          roomSubscribers[roomCode] = [...roomSubscribers[roomCode], ws];\r\n        } else {\r\n          roomSubscribers[roomCode] = [ws]\r\n        }\r\n\r\n        ws.send(JSON.stringify(roomState));\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nexport async function roomChanged(code: string) {\r\n  const roomState = await getRoomState(code);\r\n\r\n  const subscribers = roomSubscribers[code];\r\n  if (!subscribers) {\r\n    return;\r\n  }\r\n\r\n  subscribers.forEach(async (subscriber) => {\r\n    try {\r\n      subscriber.send(JSON.stringify(roomState));\r\n    } catch (err) {\r\n      console.log('not ready');\r\n    }\r\n  })\r\n}\r\n"]}