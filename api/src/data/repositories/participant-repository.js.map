{"version":3,"file":"participant-repository.js","sourceRoot":"","sources":["participant-repository.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,kCAAkC;AAElC,iFAAmE;AAEnE,MAAM,UAAU,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;AAcpC,gCAA6C,IAAY;;QACvD,MAAM,YAAY,GAAG,MAAM,UAAU,CAAC,GAAG,CAAC,qBAAqB,IAAI,EAAE,CAAC,CAAC;QACvE,IAAI,CAAC,YAAY,EAAE;YACjB,OAAO,EAAE,CAAC;SACX;QAED,OAAO,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;IAClC,CAAC;CAAA;AAPD,wDAOC;AAED,+BAA4C,IAAY,EAAE,IAAY;;QACpE,IAAI,YAAY,GAAG,MAAM,sBAAsB,CAAC,IAAI,CAAC,CAAC;QACtD,IAAI,EAAE,GAAG,CAAC,CAAC;QAEX,IAAI,CAAC,YAAY,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE;YAC9C,YAAY,GAAG,EAAE,CAAC;SACnB;aAAM;YACL,EAAE,GAAG,YAAY,CAAC,YAAY,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;SACjD;QAED,MAAM,WAAW,GAAG;YAClB,EAAE,EAAE,EAAE;YACN,IAAI,EAAE,IAAI;YACV,IAAI,EAAE,IAAI;YACV,OAAO,EAAE,IAAI;SACd,CAAC;QAEF,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAE/B,MAAM,UAAU,CAAC,GAAG,CAAC,qBAAqB,IAAI,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC;QAEhF,kCAAW,CAAC,IAAI,CAAC,CAAC;QAElB,OAAO,WAAW,CAAC;IACrB,CAAC;CAAA;AAxBD,sDAwBC;AAED,4BAAyC,IAAY,EAAE,YAA2B;;QAChF,MAAM,UAAU,CAAC,GAAG,CAAC,qBAAqB,IAAI,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC;QAChF,kCAAW,CAAC,IAAI,CAAC,CAAC;IACpB,CAAC;CAAA;AAHD,gDAGC","sourcesContent":["import * as redis from '../redis';\r\nimport {DAY_IN_SECONDS} from \"../../helpers/constants\";\r\nimport {roomChanged} from \"../../controllers/websocket-controller\";\r\n\r\nconst connection = redis.getRedis();\r\n\r\nexport interface Participant {\r\n  id: number;\r\n  team: number;\r\n  name: string;\r\n  fake_id: number;\r\n  position?: number;\r\n  state?: {\r\n    on_couch: boolean;\r\n    turn: boolean;\r\n  }\r\n}\r\n\r\nexport async function getParticipantsForRoom(code: string): Promise<Participant[]> {\r\n  const participants = await connection.get(`participants_room_${code}`);\r\n  if (!participants) {\r\n    return [];\r\n  }\r\n\r\n  return JSON.parse(participants);\r\n}\r\n\r\nexport async function addParticipantForRoom(code: string, name: string) {\r\n  let participants = await getParticipantsForRoom(code);\r\n  let id = 0;\r\n\r\n  if (!participants || participants.length === 0) {\r\n    participants = [];\r\n  } else {\r\n    id = participants[participants.length-1].id + 1;\r\n  }\r\n\r\n  const participant = {\r\n    id: id,\r\n    team: null,\r\n    name: name,\r\n    fake_id: null,\r\n  };\r\n\r\n  participants.push(participant);\r\n\r\n  await connection.set(`participants_room_${code}`, JSON.stringify(participants));\r\n\r\n  roomChanged(code);\r\n\r\n  return participant;\r\n}\r\n\r\nexport async function updateParticipants(code: string, participants: Participant[]) {\r\n  await connection.set(`participants_room_${code}`, JSON.stringify(participants));\r\n  roomChanged(code);\r\n}"]}